<template>
	<div class="page-content">
		<list @touchstart="hideKeyboard" class="scoll-content" @scroll="listScroll" :ref="list" loadmoreoffset="10" :scrollable="isScrol">
			<!-- <refresh @refresh="onrefresh"></refresh> -->
			<cell v-if="loading">
				<view class="loading-more">
					 <uni-load-more class="loading-more" status="loading"></uni-load-more>
				</view>
			</cell>
			<!-- 注意事项: 不能使用 index 作为 key 的唯一标识 -->
			<cell v-for="(item, index) in dataList" :key="item._id" :ref="'cell'+index" keep-scroll-position>
				<div class="user-item" v-if="item.send_user._id ===  currentChatUser._id || item.is_send">
					<text class="time">{{ timeRest(new Date(item.create_time),"yyyy-MM-dd hh:mm:ss") }}</text>
					<div :class="item.send_user._id ===  currentChatUser._id ? 'msg-item' : 'my-msg-item'">
						<div :class="item.send_user._id ===  currentChatUser._id ? 'head-portrait' : 'my-head'" @click="jumpDetiel(item.send_user)">
							<image class="user-head" :src="item.send_user.headImg || '../../static/defullt_head.jpg'" mode=""></image>
						</div>
						<div :class="item.send_user._id ===  currentChatUser._id ? 'msg-content' : 'my-msg-content'">
							<text :class="item.send_user._id ===  currentChatUser._id ? 'msg' : 'my-msg'">
								<text :class="item.send_user._id ===  currentChatUser._id ? 'triangle' : 'my-triangle'"></text>{{ item.content }}</text>
						</div>
					</div>
				</div>
			</cell>
		</list>
		<div class="input-content">
			<div class="send-voice">
				<uni-icons type="mic-filled" size="30"></uni-icons>
			</div>
			<div class="send-msg">
				<input class="uni-input" type="text" v-model="messge" @confirm="sendMessge" confirm-type="send" />
			</div>
			<div class="other-btn">
				<div>
					<uni-icons type="contact-filled" size="30"></uni-icons>
				</div>
				<div>
					<uni-icons type="plusempty" size="30"></uni-icons>
				</div>
			</div>
		</div>
	</div>
</template>
<script>
	import timeFormat from '../../utils/date.js'
	import uniLoadMore from "@/components/uni-load-more/uni-load-more.vue"
	const dom = weex.requireModule('dom')
	export default {
		components:{
			uniLoadMore
		},
		data() {
			return {
				timeRest: timeFormat,
				send_user: {},
				currentChatUser: {},
				messge: "",
				searchCriteria: {
					page: 1,
					limit: 15,
					send_user: '',
					to_user: '',
				},
				dataList: [],
				timer: null,
				loading: false
			}
		},
		onLoad() {
			this.send_user = uni.getStorageSync('userInfo')
			this.currentChatUser = uni.getStorageSync('currentChatUser')
			uni.setNavigationBarTitle({
				title: this.currentChatUser.loginName
			});
		},
		onReady() {
			this.$store.state.chatDetaileList = []
			this.getChatList()
			this.getRoomInfo()
			// 监听消息列表信息回调
			uni.$on('receive_msg_list', (data) => {
				if(this.loading){
					this.timer = setTimeout(()=>{
						this.dataList = data
						this.loading = false
						clearTimeout(this.timer)
					},700)
				}else{
					this.dataList = data
					this.timer = setTimeout(() => {
						this.scrollElement(data.length - 1)
					}, 100)
				}
			})
		},
		methods: {
			// 隐藏软键盘
			hideKeyboard() {
				uni.hideKeyboard()
			},
			// 获取当前房间信息
			getRoomInfo() {
				getApp().globalData.socketInfo.emit('get_room_info', {
					to_user: this.currentChatUser._id,
					send_user: this.send_user._id,
				});
			},
			// 获取消息列表
			getChatList() {
				this.searchCriteria.send_user = this.send_user._id
				this.searchCriteria.to_user = this.currentChatUser._id
				getApp().globalData.socketInfo.emit('get_msg_list', this.searchCriteria);
			},
			// 发送消息
			sendMessge() {
				if (!this.messge) {
					return
				}
				getApp().globalData.socketInfo.emit('send_messge', {
					to_user: this.currentChatUser._id,
					send_user: this.send_user._id,
					messge: this.messge
				});
				this.messge = ''
			},
			//滚动到某一个元素
			scrollElement(index) {
				clearTimeout(this.timer)
				if (this.$refs['cell' + index]) {
					//滑动到顶部
					let el = this.$refs['cell' + index][0];
					dom && dom.scrollToElement(el, {
						animated: false //滚动的动画，默认有
					});
				}
			},
			// 加载更多
			listScroll(e){
				let totalPage = Math.ceil(this.$store.state.msgTotal / 15)
				if(this.searchCriteria.page <  totalPage && !this.loading && e.contentOffset.y >= 0){
					this.loading = true
					this.searchCriteria.page += 1
					this.getChatList()
				}
			},
			// 跳转详情
			jumpDetiel(item){
				item.isFriend = 1
				this.$store.commit('SEARCH_USER', item)
				uni.navigateTo({
					url: "/pages/friends/details",
				});
				console.log(item)
			}
		},
		destroyed() {
			uni.$emit('clear_msg_list');
			getApp().globalData.socketInfo.emit('update_room_msg_read', {
				userId: this.send_user._id,
				roomId: this.$store.state.roomInfo._id,
			});
			uni.$off('receive_msg_list')
		}
	}
</script>
<style scoped>
	.page-content {
		flex: 1;
		background-color: #eeeeee;
	}

	.user-item {
		flex-direction: column;
		padding: 10wx 15wx 0 15wx;
		margin-bottom: 10wx;
	}

	.time {
		font-size: 30rpx;
		color: #999999;
		text-align: center;
	}

	.msg-item {
		margin-top: 8wx;
	}

	.my-msg-item {
		flex-wrap: wrap-reverse;
		margin-top: 8wx;
	}

	.head-portrait {
		width: 50wx;
		height: 50wx;
		border-radius: 6rpx;
		margin-right: 14wx;
	}

	.my-head {
		width: 50wx;
		height: 50wx;
		border-radius: 6rpx;
	}

	.user-head {
		flex: 1;
	}

	.msg-content {
		position: relative;
		margin-left: 70wx;
		margin-top: -50wx;
		padding-right: 50wx;
	}

	.my-msg-content {
		position: relative;
		margin-right: 70wx;
		margin-top: -50wx;
		padding-left: 50wx;
	}

	.msg {
		font-size: 14wx;
		line-height: 20wx;
		background-color: #fff;
		align-self: flex-start;
		padding: 14wx 8wx;
		border-radius: 4wx;
	}

	.my-msg {
		font-size: 14wx;
		line-height: 20wx;
		padding: 14wx 8wx;
		border-radius: 4wx;
		background-color: #1296DB;
		align-self: flex-end;
	}

	.triangle {
		width: 10wx;
		height: 10wx;
		transform: rotate(-45deg);
		background-color: #fff;
		position: absolute;
		left: -5wx;
		top: 20wx;
	}

	.my-triangle {
		width: 10wx;
		height: 10wx;
		transform: rotate(-45deg);
		background-color: #fff;
		position: absolute;
		top: 20wx;
		right: -5wx !important;
		background-color: #1296DB;
	}

	.input-content {
		flex: 0.1;
		height: 50wx;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		padding: 0 16rpx;
		background-color: pink;
		background-color: #eeeeee;
		box-shadow: 1px 1px 1px 1px rgba(0, 0, 0, 0.5);
	}

	.send-msg {
		flex: 1;
		height: 80rpx;
		margin: 0 20rpx;
	}

	.uni-input {
		flex: 1;
		background-color: #fff;
	}

	.other-btn {
		flex-direction: row;
	}
	
	.loading-more{
		justify-content: center;
		align-items: center;
	}
</style>
